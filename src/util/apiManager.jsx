var apiList = {

  /*authServer Api's*/
  "getSalt": "/api/v1/getSalt?userId=",
  /*Master Api's*/
  // "getMasterData": "/api/v1/findMasterData?code=",
  "getMasterData": "/api/v1/findMasterDataForClient?code=",
  // "uploadFile": "/api/v1/uploadFile",
  "uploadFile": "/api/v1/uploadFileForClient",
  // "downloadFile": "/api/v1/downloadFile?",
  "downloadFile": "/api/v1/downloadFileForClient?",
  "gethealthboardFlagSSO": "/api/v1/getProductConfiguration",
  "gethealthboardFlag": "/api/v1/getProductConfigurationForUserForClient",
  // "getProductConfiguration": "/api/v1/getProductConfiguration",
  "getProductConfiguration": "/api/v1/getProductConfigurationForClient",

  /*Client Api's*/
  "getClientList": "/api/v1/getClientList",
  "getClientListLinkedToUser": "/api/v1/getClientListLinkedToUser?sourceUserId=",
  "getClientListLandingPage": "/api/v1/getClientListLinkedToUser?internalCall=1&sourceUserId=",
  "createClient": "/api/v1/createClient",
  "searchClient": "/api/v1/searchClient",
  "updateClient": "/api/v1/updateClient",
  "sendSmsToClient": "/api/v1/sendSmsToClient",
  "subscribedServices": "/api/v1/listSubscribedServices?clientId=",
  "unSubscribedServices": "/api/v1/listUnSubscribedServices?clientId=",
  "addSubscription": "/api/v1/addServiceSubscription",
  "removeSubscription": "/api/v1/removeServiceSubscription",
  "getPolicy": "/api/v1/getPolicy?clientId=",
  "getClientUsers": "/api/v1/listOfUsersForClient?clientId=",
  "mapUsersToClient": "/api/v1/mapUsersToClient",
  "unMapUsersToClient": "/api/v1/unMapUsersToClient",
  "getClientsSla": "/api/v1/getSla?clientId=",
  "updateSla": "/api/v1/updateSla",
  "createUserInDataDog": "/api/v1/createUserInDataDog",
  "disableUserInDataDog": "/api/v1/disableUserInDataDog",
  "getDataDogConfiguration": "/api/v1/getDataDogConfiguration?clientId=",
  "getStatusCakeConfiguration": "/api/v1/getStatusCakeConfiguration?clientId=",
  "configureDataDog": "/api/v1/configureDataDog",
  "configureStatusCake": "/api/v1/configureStatusCake",
  "updateStatusCake": "/api/v1/updateStatusCakeConfiguration",
  "listUserInDataDog": "/api/v1/listUserInDataDog?clientId=",
  "updatePolicy": "/api/v1/updatePolicy",
  "createAwsInfo": "/api/v1/createAwsInfo",
  "createAzureInfo": "/api/v1/createAzureInfo",
  "getAWSMapping": "/api/v1/getAwsMappingInfo?clientId=",
  "listAWSUsers": "/api/v1/listAwsUsers?clientId=",
  "updateAWSUser": "/api/v1/updateAwsUsers",
  "downloadClientsExcelReport": "/api/v1/downloadClientsExcelReport",
  "viewClientById": "/api/v1/viewClientById",
  "updateAzureInfo": "/api/v1/updateAzureInfo",
  "getVaultDataByClient": "/api/v1/getVaultDataByClient?clientId=",
  "updateAwsInfo": "/api/v1/updateAwsInfo",
  "fetchVaultInfo": "/api/v1/fetchVaultInfo?clientId=",

  /*User Api's*/
  "getUserDashboard": "/api/v1/usersList",
  "getUserDashboardNew": "/api/v1/dashboardCount",
  "getUserDetails": "/api/v1/getUserDetails?userId=",
  "createUser": "/api/v1/createUser",
  "getAllUsers": "/api/v1/getAllUsers",
  "userLogin": "/api/v1/login",
  "updateUser": "/api/v1/updateUser",
  "sendOtp": "/api/v1/sendOtp",
  "verifyOtp": "/api/v1/verifyOtp",
  "resetPassword": "/api/v1/resetPassword",
  "resetMfaToken": "/api/v1/resetMfaToken",
  "changePassword": "/api/v1/changePassword",
  "userInfo": "/api/v1/userInfo",
  "downloalUsersReport": "/api/v1/downloalUsersReport",
  "validateRecaptcha": "/api/v1/validateRecaptcha",
  "verifyOtpResetPassword": "/api/v1/verifyOtpResetPassword",

  /*Saml Api's*/
  "samlDetails": "/api/v1/samlDetails",
  "samlLogin": "/samlidp/module.php/core/authenticate.php?as=conciertoAuth",
  "adfsLogin": "/api/v1/adfsLogin",

  /*Ticketing Api's*/
  "getServiceCodesAws": "/api/v1/getServiceCodesAws",
  "getCategoryCodesAws": "/api/v1/getCategoryCodesAws",
  "createAwsSupportTicket": "/api/v1/createAwsSupportTicket",
  "ticketDashboard": "/api/v1/dashboard",
  "getTicketDetails": "/api/v1/getTicketDetails?ticketId=",
  "escalateTicket": "/api/v1/escalateTicket",
  "escalationDashboard": "/api/v1/escalationDashboard",
  "deEscalateTicket": "/api/v1/deEscalateTicket",
  "closeEscalateTicket": "/api/v1/closeEscalateTicket",
  "getTopSixGroups": "/api/v1/getTopSixGroups",
  "ticketDashBaord": "/api/v1/dashboard",
  "createTicket": "/api/v1/createTicket",
  "updateTicket": "/api/v1/updateTicket",
  "assignStaff": "/api/v1/assignStaff",
  "initiatePlannedActivity": "/api/v1/initiatePlannedActivity",
  "transferDept": "/api/v1/transferDept",
  "postReply": "/api/v1/postReply",
  "mergeTickets": "/api/v1/mergeTickets",
  "unMergeTickets": "/api/v1/unMergeTickets",
  "getMergeParentTickets": "/api/v1/getParentTicket",
  "parentTicketsDashboard": "/api/v1/dashboard",
  "getMergeChildTickets": "/api/v1/getChildTickets",
  "bulkCloseTicket": "/api/v1/bulkUpdate",
  // "averageAging": "/api/v1/averageAgeingTickets",
  "averageAging": "/api/v1/averageAgeingTicketsForClient",
  // "slaBreachInfo": "/api/v1/slaBreachInfo",
  "slaBreachInfo": "/api/v1/slaBreachInfoForClient",
  "ticketList": "/api/v1/ticketList",
  "ticketDetails": "/api/v1/details?ticketId=",
  "allClientsTickets": "/api/v1/allClientsTickets",
  "myOpenTickets": "/api/v1/myOpenTickets",
  "getTicketStats": "/api/v1/getTicketStats",
  "getTicketStatsDays": "/api/v1/getTicketStatsDays",
  "createServiceNowTicket": "/api/v1/createServiceNowTicket",
  "getMatchedArticles": "/api/v1/getMatchedArticles",

  /*Admin Api's*/
  "getGroups": "/api/v1/groups/",
  "getGroups_v2": "/api/v1/groups/",
  "getGroupList": "/api/v1/groups",
  "getGroupList_v2": "/api/v1/groups",
  "getClientGroups": "/api/v1/client/",
  "getClientGroups_v2": "/api/v1/client/",
  "getClientGroupList": "/api/v1/client",
  "getClientGroupList_v2": "/api/v1/client",
  "getRoles": "/api/v1/roles",
  "getFeatures": "/api/v1/features",
  "getFeatures_v2": "/api/v1/features",
  "getPermissions": "/api/v1/permissions",
  "getPermissions_v2": "/api/v1/permissions",
  "getClients": "/api/v1/getClients",
  "getUsers": "/api/v1/getUsers",
  "getAudits": "/api/v1/audits",
  "getHelpTopics": "/api/v1/helpTopics",
  "getHelpTopics_v2": "/api/v1/helpTopics",
  //"getHealthBoard": "/api/homePage/clientHealthBoard",
  "getHealthBoard": "/api/v1/homePage",
  "getclientHealthBaord": "/api/v1/clientHealthBoard",
  "clients": "/api/v1/clients",
  "users": "/api/v1/users",
  "groupsMappedToClient": "/api/v1/clientGroupList?clientId=",
  "groupsMappedToClient_v2": "/api/v1/clientGroupList?clientId=",
  "getClientVisList": "/api/v1/clients",
  "getClientVisList_v2": "/api/v1/clients",
  "adminClientGroups": "/api/v1/clientGroupList",
  "adminClientGroups_v2": "/api/v1/clientGroupList",
  "systemPermission": "/api/v1/systemPermission",
  // "generateReport": "/api/v1/generateReport",
  "generateReport": "/api/v1/generateReportForClient",
  // "updateReport": "/api/v1/updateReport",
  "updateReport": "/api/v1/updateReportForClient",
  // "getReport": "/api/v1/getReport",
  "getReport": "/api/v1/getReportForClient",
  // "downloadReport": "/api/v1/downloadReport?clientId=",
  "downloadReport": "/api/v1/downloadReportForClient?clientId=",

  /*Rca Api's*/
  "getRcaList": "/api/v1/filterRca",
  "getRcaDetails": "/api/v1/getRcaDetails?ticketId=",
  "updateRca": "/api/v1/updateRca",
  "initiateRca": "/api/v1/initiateRca",
  "submitRca": "/api/v1/submitRca",
  "approveRca": "/api/v1/approveRca",
  "rejectRca": "/api/v1/rejectRca",
  "dowloadPdfFile": "/api/v1/getPdfFile?ticketId=",
  "searchRca": "/api/v1/searchRca",

  /*Project Management Api's*/
  "getProjects": "/api/v1/searchProject",
  "createProject": "/api/v1/createProject",
  "getProjectDetails": "/api/v1/projectInformation?projectId=",
  "updateProject": "/api/v1/updateProjectData",
  "getClientProjects": "/api/v1/projectDetails?clientId=",
  "editProjectData": "/api/v1/editProjectData?projectId=",
  "getTimeSheetData": "/api/v1/timesheet?projectId=",
  "createSandBoxProject": "/api/v1/addSandboxProject",
  // "viewProjectById": "/api/v1/viewSandboxProjectById/",
  "viewProjectById": "/api/v1/viewSandboxProjectByIdForClient/",
  "editSandboxProject": "/api/v1/editSandboxProject",
  "deleteProject": "/api/v1/deleteSandboxProject",
  "viewSandBoxAccountList": "/api/v1/viewProjectSandboxAccounts?",
  "deleteSandboxAccount": "/api/v1/deleteSandboxAccount",
  "addSandboxWithoutApproval": "/api/v1/addSandboxWithoutApproval",
  "addSandboxAccount": "/api/v1/addSandboxAccount",
  "editSandboxAccount": "/api/v1/editSandboxAccount",
  "addApprover": "/api/v1/addApprover",
  "removeApprover": "/api/v1/removeApprover",
  "sendReminder": "/api/v1/sendReminder",
  "addUser": "/api/v1/addUser",
  "removeUser": "/api/v1/removeUser",
  "addAwsInfo": "/api/v1/addAwsInfo",
  "addAzureInfo": "/api/v1/addAzureInfo",
  // "getProjectList": '/api/v1/getProjectList?clientId=',
  "getProjectList": '/api/v1/getProjectListForClient?clientId=',
  "sandboxAccountsByProject": "/api/v1/sandboxAccountsByProject?projectId=",
  "autoApproverForHost": "/api/v1/updateAutoApproverDetailsForHost",

  /*Mom Api's*/
  "fetchMomData": "/api/v1/fetchMomData",
  "fetchStatus": "/api/v1/fetchStatus",
  "fetchTopicStatus": "/api/v1/fetchMomStatus",
  "getMomDetails": "/api/v1/findByMomId?id=",
  "getCliStat": "/api/v1/findByCliStat",
  "createMom": "/api/v1/createMom",
  "updateMom": "/api/v1/updateMom",
  "deleteMom": "/api/v1/deleteMom",
  "onMomSubmit": "/api/v1/onMomSubmit",

  /*PlannedActivity Api's*/
  "searchActivity": "/api/v1/searchActivity",
  "createPlannedActivity": "/api/v1/createPlannedActivity",
  "editPlannedActivity": "/api/v1/editActivity?activityId=",
  "copyActivity": "/api/v1/copyActivity",
  "approveActivity": "/api/v1/approveActivity",
  "obsoleteActivity": "/api/v1/obsoleteActivity",
  "submitActivity": "/api/v1/submitActivity",
  "updatePlannedDetails": "/api/v1/updatePlannedDetails",
  "deletePATask": "/api/v1/deletePATask",
  "deletePARollback": "/api/v1/deletePARollback",
  "completeActivity": "/api/v1/completeActivity",
  "rollBackActivity": "/api/v1/rollBackActivity",
  "unsuccessFullActivity": "/api/v1/unsuccessFulActivity",
  "unified_job_templates": "/api/v2/unified_job_templates",
  "updatePATask": "/api/v1/updatePATask",
  "updatePARollBack": "/api/v1/updatePARollBack",

  /*ScheduleTask Api's*/
  "scheduleTaskSearch": "/api/v1/searchTask",
  "updateST": "/api/v1/updateTask",
  "createST": "/api/v1/createTask",
  "downloadSampleURL": "/api/v1/getTemplate",
  "bulkUpload": "/api/v1/bulkUpload",

  /*HostInventory Api's*/
  "cspDetailsData": "/api/v1/displayIntances?csp=",
  "taskList": "/api/v1/displayTasksAws?id=",
  "getHosts": "/api/v1/displayAll?clientId=",
  "getAwsHostDetails": "/api/v1/displayHosts?hostInventoryId=",
  "rejectHostDetails": "/api/v1/cancelApproval",
  "approveHostDetails": "/api/v1/approval",
  "approveHostDetailsAz": "/api/v1/approvalAz",
  "rejectHostDetailsAz": "/api/v1/cancelApprovalAz",
  "startEC2": "/api/v1/startEc2",
  "stopEC2": "/api/v1/stopEc2",
  "createHost": "/api/v1/createHost",
  "fetchEnv": "/api/v1/fetchEnv",
  "fetchType": "/api/v1/fetchType",
  "fetchOs": "/api/v1/fetchOs",
  "getAzureHosts": "/api/v1/displayAllAzure?clientId=",
  "getAzureHostDetails": "/api/v1/displayAzureHosts?hostInventoryId=",
  "createAzureHost": "/api/v1/createAzureHost",
  "displayHosts": "/api/v1/displayHosts?clientId=",
  "updateHost": "/api/v1/updateHost",
  "updateAzureHost": "/api/v1/updateAzureHost",
  "startVm": "/api/v1/startVm",
  "stopVm": "/api/v1/stopVm",
  "fetchRegionAWS": "/api/v1/fetchRegionAWS",
  "fetchRegionAzure": "/api/v1/fetchRegionAzure",
  "volumnList": "/api/v1/displayVolume",
  "deleteHost": "/api/v1/deleteHost",
  "deleteAzureHost": "/api/v1/deleteAzureHost",
  "downloadAwsReport": "/api/v1/downloadAwsReport?clientId=",
  "downloadAzureReport": "/api/v1/downloadAzureReport?clientId=",
  //New Apis of Host Inventory
  "listAwsHost": "/api/v1/listAwsHost",
  "listAzureHost": "/api/v1/listAzureHost",
  "displayAwsHostsById": "/api/v1/displayAwsHostsById",
  "displayAzureHostsById": "/api/v1/displayAzureHostsById",
  "updateAwsHost": "/api/v1/updateAwsHost",
  "EditAzureHost": "/api/v1/EditAzureHost",
  "getUserListForHost": "/api/v1/getUserListForHost",
  "clientAutoDiscover": "/api/v1/clientAutoDiscover",
  "clientMappingExist": "/api/v1/clientMappingExist",
  "sandboxAutoDiscover": "/api/v1/sandboxAutoDiscover",
  "sandboxMappingExist": "/api/v1/sandboxMappingExist",
  "azureDiscoverList": "/api/v1/azureDiscoverList",
  "azureDiscoveredHost": "/api/v1/azureDiscoveredHost",
  "azureUnVerifiedList": "/api/v1/azureUnVerifiedList",
  "azureUnVerifiedHost": "/api/v1/azureUnVerifiedHost",
  "azureRejectedList": "/api/v1/azureRejectedList",
  "azureRejectedHost": "/api/v1/azureRejectedHost",
  "removeAzureHost": "/api/v1/removeAzureHost",
  "sendAzureHostForApproval": "/api/v1/sendAzureHostForApproval",
  "awsDiscoverList": "/api/v1/awsDiscoverList",
  "awsDiscoveredHost": "/api/v1/awsDiscoveredHost",
  "awsUnVerifiedList": "/api/v1/awsUnVerifiedList",
  "awsUnVerifiedHost": "/api/v1/awsUnVerifiedHost",
  "awsRejectedList": "/api/v1/awsRejectedList",
  "awsRejectedHost": "/api/v1/awsRejectedHost",
  "clientLevelAutoDiscoveryForAws": "/api/v1/clientLevelAutoDiscoveryForAws",
  "clientLevelAutoDiscoveryForAzure": "/api/v1/clientLevelAutoDiscoveryForAzure",
  "autoDiscoveryForAwsAccount": "/api/v1/autoDiscoveryForAwsAccount",
  "autoDiscoveryForAzureAccount": "/api/v1/autoDiscoveryForAzureAccount",
  "removeAwsHost": "/api/v1/removeAwsHost",
  "sendAwsHostForApproval": "/api/v1/sendAwsHostForApproval",
  "getManualAutoDiscoveryStatus": "/api/v1/getManualAutoDiscoveryStatus",
  "updateAwsDiscoveredHost": "/api/v1/updateAwsDiscoveredHost",
  "updateAwsRejectedHost": "/api/v1/updateAwsRejectedHost",
  "updateAzureDiscoverHost": "/api/v1/updateAzureDiscoverHost",
  "sendAzurePreviousState": "/api/v1/sendAzurePreviousState",
  "updateAzureRejectHost": "/api/v1/updateAzureRejectHost",
  "sendAwsPreviousState": "/api/v1/sendAwsPreviousState",
  "bulkApproveAws": "/api/v1/bulkApproveAws",
  "bulkRejectAws": "/api/v1/bulkRejectAws",
  "bulkApproveAzure": "/api/v1/bulkApproveAzure",
  "bulkRejectAzure": "/api/v1/bulkRejectAzure",
  "awsCurrentState": "/api/v1/awsCurrentState",
  "azureCurrentState": "/api/v1/azureCurrentState",
  "manualStartAwsHost": "/api/v1/manualStartAwsHost",
  "manualStopAwsHost": "/api/v1/manualStopAwsHost",
  "manualStartAzureHost": "/api/v1/manualStartAzureHost",
  "manualStopAzureHost": "/api/v1/manualStopAzureHost",
  "awsSearchHost": "/api/v1/searchAwsHost",
  "azureSearchHost": "/api/v1/searchAzureHost",
  "syncAWSHostServiceNow": "/api/v1/syncAWSHostServiceNow",
  "syncAzureHostServiceNow": "/api/v1/syncAzureHostServiceNow",


  /*Monitoring Api's*/
  "fetchMonitoring": "/api/v1/listMonitoringPartnersForClient?",
  "getMonitoringDetails": "/api/v1/getMonitoringDetailsForClient?",
  "getMasterClient": "/api/v1/getMasterClientInfo?",

  /*RequestForm Api's*/
  "getModuleName": "/api/v1/getModuleName",
  "getRequestType": "/api/v1/getRequestType",
  "getMemoryRequestType": "/api/v1/getMemoryRequestType",
  "getTypeCheck": "/api/v1/getTypeCheck",
  "viewProjectType": "/api/v1/viewProjectType",
  "saveUserRequest": "/api/v1/requestUser",
  "saveClientRequest": "/api/v1/requestClient",
  "saveHostRequest": "/api/v1/requestHost",
  "addProbe": "/api/v1/requestProbe",
  "saveProjectRequest": "/api/v1/requestProject",
  "savePsgRequest": "/api/v1/requestPSG",
  "requestService": "/api/v1/requestService",
  "infraServiceRequest": "/api/v1/infraServiceRequest",
  "getInfraServiceDetails": "/api/v1/getInfraServiceDetails",

  /* Change Register Api's */

  "findChange": "/api/v1/findChange",
  "findChangeDetails": "/api/v1/findOneChange?changeId=",
  "saveChange": "/api/v1/createChange",
  "updateChange": "/api/v1/updateChange",
  "deleteChange": "/api/v1/deleteChange",
  "submitStatus": "/api/v1/onChangeSubmit",

  /* Admin Settings*/

  // "getTicketSettings": "/api/v1/ticketSettings",
  "getTicketSettings": "/api/v1/ticketSettingsForClient",
  // "getLogs": "/api/v1/purge",
  "getLogs": "/api/v1/purgeForClient",
  // "getEmailTemplates": "/api/v1/listTempl",
  "getEmailTemplates": "/api/v1/listTemplForClient",
  // "getSystemLogLevel": "/api/v1/log",
  "getSystemLogLevel": "/api/v1/logForClient",
  // "getMaxLogins": "/api/v1/maxLogins",
  "getMaxLogins": "/api/v1/maxLoginsForClient",
  // "getBanList": "/api/v1/banList",
  "getBanList": "/api/v1/banListForClient",
  // "getTemplateList": "/api/v1/listTempl",
  "getTemplateList": "/api/v1/listTemplForClient",
  // "getEmailList": "/api/v1/list",
  "getEmailList": "/api/v1/listForClient",
  // "getTimeZones": "/api/v1/timezone",
  "getTimeZones": "/api/v1/timezoneForClient",
  // "updateTicketSettings": "/api/v1/update",
  "updateTicketSettings": "/api/v1/updateForClient",
  // "viewEmail": "/api/v1/viewMail?id=",
  "viewEmail": "/api/v1/viewMailForClient?id=",
  // "deleteEmail": "/api/v1/deleteEmail",
  "deleteEmail": "/api/v1/deleteEmailForClient",
  // "updateEmail": "/api/v1/updateEmail",
  "updateEmail": "/api/v1/updateEmailForClient",
  // "createEmail": "/api/v1/createEmail",
  "createEmail": "/api/v1/createEmailForClient",
  // "deleteTempl": "/api/v1/deleteTempl",
  "deleteTempl": "/api/v1/deleteTemplForClient",
  // "deleteBan": "/api/v1/deleteBan",
  "deleteBan": "/api/v1/deleteBanForClient",
  // "protocol": "/api/v1/protocol",
  "protocol": "/api/v1/protocolForClient",

  /*Reports API */
  "getLogReport": "/api/v1/getLogReport",
  "ticketSummaryReport": "/api/v1/summaryReport",
  "serviceSummaryReport": "/api/v1/serviceSummaryReport",
  "exportExcelReport": "/api/v1/getExcelForServiceSummary",
  "summaryExcelReport": "/api/v1/summaryExcelReport",
  "userRequestReport": "/api/v1/userRequestReport",
  "userTicketsCount": "/api/v1/userTicketsCount",
  "userExcelReport": "/api/v1/userExcelReport",
  "clientRequestReport": "/api/v1/clientRequestReport",
  "clientExcelReport": "/api/v1/clientExcelReport",
  "userTicketsCountExcel": "/api/v1/userTicketsCountExcel",
  "listOfUsersForClientIds": "/api/v1/listOfUsersForClientIds",
  "userReportForExcel": "/api/v1/downloalAllUsersReport",


  /* AutoDoc API*/
  "findAutoDocHostList": "/api/v1/getHost",
  "downloadCurrentDelta": "/api/v1/downloadCurrentState",
  "findDeltaHistory": "/api/v1/getDeltaHistory",
  "downloadHistoryDelta": "/api/v1/downloadDelta",
  "runScriptManual": "/api/v1/runScriptManual",

  /*Service Catalog */
  "getTemplates": "/api/v1/templateList",
  "getCatalogs": "/api/v1/catalogList",
  // "createServTemplate": "/api/v1/createTemplate",
  "createServTemplate": "/api/v1/catalogCreateTemplate",
  "createAwsCatalog": "/api/v1/createAwsCatalog",
  "launchAwsCatalog": "/api/v1/launchAwsCatalog",
  "createAzureCatalog": "/api/v1/createAzureCatalog",
  "launchAzureCatalog": "/api/v1/launchAzureCatalog",
  "updateAwsStack": "/api/v1/updateAwsStack",
  "updateAzureStack": "/api/v1/updateAzureStack",
  "getAwsRegions": "/api/v1/getAwsRegions",
  "getAzureResourceGroup": "/api/v1/getAzureResourceGroup",
  "createAnsibleCatalog": "/api/v1/createAnsibleCatalog",
  // "clientTemplates": "/api/v1/clientTemplates",
  "clientTemplates": "/api/v1/catalogClientTemplates",

  /*Orchestration */
  "getOrchTemplates": "/api/v1/clientTemplates",
  "getTemplatesById": "/api/v1/getTemplateListByTemplateId",
  "getOrchServiceList": "/api/v1/getOrchServiceList",
  "getOrchById": "/api/v1/getOrchServiceByOrchId",
  "createOrchTemplate": "/api/v1/createTemplate",
  "createOrchService": "/api/v1/terraformBaseHandler",
  "modifyOrchService": "/api/v1/modifyBaseHandler",
  "deleteOrchTemplate": "/api/v1/deleteTemplate",
  "deleteOrchLunched": "/api/v1/deleteOrchService",
  "viewOrchProvider": "/api/v1/terraformBaseHandler",
  "createPowerShellTemplate": "/api/v1/createPowerShellTemplate",
  "runPowerShellScript": "/api/v1/runPowerShellScript",
  "matchOrchTemplates": "/api/v1/matchOrchTemplates",


  // Product Configuration
  "getClientSubscriptionTools": "/api/v1/clientSubscriptionTools",
  "getClientSubscriptionServices": "/api/v1/clientSubscriptionServices",
  "muteTab": "/api/v1/mute",
  "getHostDetails": "/api/v1/hostDetails",
  "getApplicationDetails": "/api/v1/applicationDetails",
  "getEventConfiguration": "/api/v1/eventConfiguaration",
  "eventEnrichment": "/api/v1/enrich",
  // "othersTab": "/api/v1/configSettings",
  "othersTab": "/api/v1/configSettingsForClient",
  "loginDetailsByClientId": "/api/v1/loginDetailsByClientId",
  "postClientSubscriptionTools": "/api/v1/clientSubscriptionTools",
  "getMappingByClient": "/api/v1/getMappingByClient",


  // cem dashboard
  // "activeEvents": "/api/v1/getAllActiveEvents",
  "activeEvents": "/api/v1/getAllActiveEventsForClient",
  // "inActiveEvents": "/api/v1/getAllInActiveEvents",
  "inActiveEvents": "/api/v1/getAllInActiveEventsForClient",
  // "getActiveEventsByTime": "/api/v1/getActiveEventsByTime",
  "getActiveEventsByTime": "/api/v1/getActiveEventsByTimeForClient",
  // "getResolvedEventsByTime": "/api/v1/getInActiveEventsByTime",
  "getResolvedEventsByTime": "/api/v1/getInActiveEventsByTimeForClient",
  // "getEventsByApplication": "/api/v1/getEventsByApplication",
  "getEventsByApplication": "/api/v1/getEventsByApplicationForClient",
  // "getEventsByType": "/api/v1/getEventsByType",
  "getEventsByType": "/api/v1/getEventsByTypeForClient",
  "cemEventBarGraphData": "/api/v1/cemEventBarGraphData",
  "listClodWatchLogGroupsNames": "/api/v1/listClodWatchLogGroupsNames",
  "listCloudWatchAlarmNames": "/api/v1/listCloudWatchAlarmNames",
  // "listLogGroupType": "/api/v1/listLogGroupType",
  "listLogGroupType": "/api/v1/listLogGroupTypeForClient",
  // "eventConfigByOnlyToolId": "/api/v1/eventConfigByOnlyToolId",
  "eventConfigByOnlyToolId": "/api/v1/eventConfigByOnlyToolIdForClient",
  "allEventList": "/api/v1/getAllEventList",
  "exportExcelForCEM": "/api/v1/exportallEventList",
  "graphanaWidgetURL": "/api/v1/grafanaWidgets",
  "eventByRecurrence": "/api/v1/eventByRecurrence",
  "eventByTheTime": "/api/v1/eventByTheTime",
  "sendMailUrl": "/api/v1/sendNewEmail",
  "ticketByEvents": "/api/v1/ticketByEvents",
  "acknowledgeEvents": "/api/v1/acknowledgeEvents",
  "getTicketData": "/api/v1/getTicketData",
  "updateEvent": "/api/v1/updateEvent",
  "getEventByEventId": "/api/v1/getEventByEventId",
  "editSubscriptionDetails": "/api/v1/editSubscriptionDetails",
  "addServiceNowConfiguration": "/api/v1/addServiceNowConfiguration",
  "getServiceNowConfiguration": "/api/v1/getServiceNowConfiguration",
  "updateServiceNowConfiguration": "/api/v1/updateServiceNowConfiguration",


  //knowledgeBase
  "getArticles": "/api/v1/getArticles",
  "getArticlesById": "/api/v1/getArticlesById",
  // "getTags": "/api/v1/getTags",    
  "getTags": "/api/v1/getTagsForClient",
  // "createArticle": "/api/v1/createArticle",
  "createArticle": "/api/v1/createArticleForClient",
  // "editDeletePublishArticle": "/api/v1/updateArticle",
  "editDeletePublishArticle": "/api/v1/updateArticleForClient",

  // Documents Management
  "getDocumentList": "/api/v1/getDoc",
  "getUserListForDoc": "/api/v1/getUserListForDoc",
  "createDoc": "/api/v1/createDoc",
  "updateDocById": "/api/v1/updateDocById",
  "deleteDocById": "/api/v1/deleteDocById",
  "getDocById": "/api/v1/getDocById",

  // user sessions
  "getSessions": "/api/v1/getSessions",
  "approveSessionStep1": "/api/v1/approveSessionStep1",
  "approveSessionStep2": "/api/v1/approveSessionStep2",
  "declineSessionStep1": "/api/v1/declineSessionStep1",
  "declineSessionStep2": "/api/v1/declineSessionStep2",

  /* graphs */

  "eventByTheToolsTime": "/api/v1/eventByTheToolsTime",
  "availableOrchTemplate": "/api/v1/availableOrchTemplate",
  "availableTicketArticles": "/api/v1/availableTicketArticles",
  "searchGraphActivity": "/api/v1/searchGraphActivity",
  "ticketDepartmentCount": "/api/v1/ticketDepartmentCount",
  "rcaCountWithStatus": "/api/v1/rcaCountWithStatus",
  "ticketStatusCount": "/api/v1/ticketStatusCount",
  "ticketAvgResponceResolution": "/api/v1/ticketAvgResponceResolution",

  // new dashboard Jan, 2021
  "ticketSlaStatistics": "/api/v1/ticketSlaStatistics",
  "acknowledgeEventsTrends": "/api/v1/acknowledgeEventsTrends",
  "eventStatistics": "/api/v1/eventStatistics",
  "ticketStatics": "/api/v1/ticketStatics",
  "escalationTicketsList": "/api/v1/escalationTicketsList",
  "ticketsGroupByDatePriority": "/api/v1/ticketsGroupByDatePriority",
  "ticketsGroupByDateResponseResolution": "/api/v1/ticketsGroupByDateResponseResolution",
  "eventsBySource": "/api/v1/eventsBySource",
  "eventsToolsTrendsData": "/api/v1/eventsToolsTrendsData",

  /* Teams API */
  "getTeamsList": "/api/v1/teamsListBehalfOfUser",
  "getChannelsList": "/api/v1/channelListBehalfOfUser",
  "scheduleMeetingBehalfOfUser": "/api/v1/scheduleMeetingBehalfOfUser",
  "sendMessageInChannelBehalfOfUser": "/api/v1/sendMessageInChannelBehalfOfUser",
  "getTimeZonesBehalfOfUser": "/api/v1/getTimeZonesBehalfOfUser"
}

var staticUrls = {
  /*
    "userDirectory": "http://18.220.159.23:3028",
    "clientDirectory": "http://18.220.159.23:3028",
    "admin": "http://18.220.159.23:3028",
    "masterService": "http://18.220.159.23:3028",
    "adminSettings": "http://18.220.159.23:3028",
    "plannedActivity": "http://18.220.159.23:3028",
    "rca": "http://18.220.159.23:3028",
    "projectManagement": "http://18.220.159.23:3028",
    "minutesOfMeeting": "http://18.220.159.23:3028",
    "hostInventory": "http://18.220.159.23:3028",
    "scheduleTask": "http://18.220.159.23:3028",
    "monitoring": "http://18.220.159.23:3028",
    "requestForm": "http://18.220.159.23:3028",
    "ticketing": "http://18.220.159.23:3028",
    "changeRegister": "http://18.220.159.23:3028",
    "healthBoard": "http://18.220.159.23:3028",
    "clientHealthBaord": "http://18.220.159.23:3028",
    "authServer": "http://18.220.159.23:3028",
    "vault": "http://18.220.159.23:3028",
    "samlURL": "https://idp.concierto.in",
    "autoDoc": "http://18.220.159.23:3028",
    "serviceCatalog": "http://18.220.159.23:3028",
    "orchestration": "http://18.220.159.23:3028",
    "productConfig": "http://18.220.159.23:3028",
    "eventMonitoring": "http://18.220.159.23:3028",
    "cemSocketURL": "http://18.220.159.23:3028",
    "knowledgeBase": "http://18.220.159.23:3028",
    "documentMgmt": "http://18.220.159.23:3028"
*/

  "userDirectory": "https://devenv.concierto.in",
  "clientDirectory": "https://devenv.concierto.in",
  "admin": "https://devenv.concierto.in",
  "masterService": "https://devenv.concierto.in",
  "adminSettings": "https://devenv.concierto.in",
  "plannedActivity": "https://devenv.concierto.in",
  "rca": "https://devenv.concierto.in",
  "projectManagement": "https://devenv.concierto.in",
  "minutesOfMeeting": "https://devenv.concierto.in",
  "hostInventory": "https://devenv.concierto.in",
  "scheduleTask": "https://devenv.concierto.in",
  "monitoring": "https://devenv.concierto.in",
  "requestForm": "https://devenv.concierto.in",
  "ticketing": "https://devenv.concierto.in",
  "changeRegister": "https://devenv.concierto.in",
  "healthBoard": "https://devenv.concierto.in",
  "clientHealthBaord": "https://devenv.concierto.in",
  "authServer": "https://devenv.concierto.in",
  "vault": "https://devenv.concierto.in",
  "samlURL": "https://idp.concierto.in",
  "autoDoc": "https://devenv.concierto.in",
  "serviceCatalog": "https://devenv.concierto.in",
  "orchestration": "https://devenv.concierto.in",
  "productConfig": "https://devenv.concierto.in",
  "eventMonitoring": "https://devenv.concierto.in",
  "knowledgeBase": "https://devenv.concierto.in",
  "cemSocketURL": "https://devenv.concierto.in",
  "documentMgmt": "https://devenv.concierto.in"
}

var dynamicUrls = {
  "userDirectory": process.env.REACT_APP_SVC_USER_DIRECTORY,
  "clientDirectory": process.env.REACT_APP_SVC_CLIENT_DIRECTORY,
  "admin": process.env.REACT_APP_SVC_ADMINISTRATOR,
  "masterService": process.env.REACT_APP_SVC_MASTER_DB,
  "adminSettings": process.env.REACT_APP_SVC_ADMIN_TICKET_SETTINGS,
  "plannedActivity": process.env.REACT_APP_SVC_PLANNED_ACTIVITY,
  "requestForm": process.env.REACT_APP_SVC_REQUEST_FORM,
  "changeRegister": process.env.REACT_APP_SVC_CHANGE_REGISTER,
  "reporting": process.env.REACT_APP_SVC_REPORTING,
  "ticketing": process.env.REACT_APP_SVC_TICKETING,
  "scheduleTask": process.env.REACT_APP_SVC_SCHEDULED_TASK,
  "minutesOfMeeting": process.env.REACT_APP_SVC_MINUTES_OF_MEETING,
  "healthBoard": process.env.REACT_APP_SVC_HEALTH_BOARD,
  "hostInventory": process.env.REACT_APP_SVC_HOST_INVENTORY,
  "rca": process.env.REACT_APP_SVC_ROOT_CAUSE_ANALYSIS,
  "projectManagement": process.env.REACT_APP_SVC_PROJECT_MANAGEMENT,
  "monitoring": process.env.REACT_APP_SVC_CLIENT_DIRECTORY,
  "clientHealthBaord": process.env.REACT_APP_SVC_CLEINTHEALTHBOARD,
  "authServer": process.env.REACT_APP_SVC_AUTH_SERVER,
  "vault": process.env.REACT_APP_SVC_VAULT,
  "samlURL": process.env.REACT_APP_SAML,
  "autoDoc": process.env.REACT_APP_SVC_AUTO_DOC,
  "serviceCatalog": process.env.REACT_APP_SVC_SERVICE_CATALOG,
  "orchestration": process.env.REACT_APP_SVC_ORCHESTRATION,
  "productConfig": process.env.REACT_APP_SVC_PRODUCT_CONFIGURATION,
  "eventMonitoring": process.env.REACT_APP_SVC_MONITORING_EVENT_LISTENER,
  "cemSocketURL": process.env.REACT_APP_SVC_CEMSOCKET,
  "knowledgeBase": process.env.REACT_APP_SVC_KNOWLEDGE_BASE,
  "documentMgmt": process.env.REACT_APP_SVC_DOCUMENT_MGMT
}

let authServerApiUrls = {
  "getSalt": (dynamicUrls.authServer || staticUrls.authServer) + apiList.getSalt
}
let clientApiUrls = {
  "getClientList": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getClientList,
  "getClientListLinkedToUser": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getClientListLinkedToUser,
  "getClientListLandingPage": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getClientListLandingPage,
  "createClient": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.createClient,
  "searchClient": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.searchClient,
  "updateClient": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.updateClient,
  "sendSmsToClient": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.sendSmsToClient,
  "subscribedServices": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.subscribedServices,
  "unSubscribedServices": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.unSubscribedServices,
  "addSubscription": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.addSubscription,
  "removeSubscription": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.removeSubscription,
  "getPolicy": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getPolicy,
  "getClientUsers": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getClientUsers,
  "mapUsersToClient": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.mapUsersToClient,
  "unMapUsersToClient": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.unMapUsersToClient,
  "getClientsSla": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getClientsSla,
  "updateSla": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.updateSla,
  "createUserInDataDog": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.createUserInDataDog,
  "disableUserInDataDog": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.disableUserInDataDog,
  "getDataDogConfiguration": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getDataDogConfiguration,
  "getStatusCakeConfiguration": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getStatusCakeConfiguration,
  "configureDataDog": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.configureDataDog,
  "configureStatusCake": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.configureStatusCake,
  "updateStatusCake": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.updateStatusCake,
  "listUserInDataDog": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.listUserInDataDog,
  "updatePolicy": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.updatePolicy,
  "getMasterClient": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getMasterClient,
  "getAWSMapping": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getAWSMapping,
  "listAWSUsers": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.listAWSUsers,
  "updateAWSUser": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.updateAWSUser,
  "downloadClientsExcelReport": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.downloadClientsExcelReport,
  "viewClientById": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.viewClientById,
  "createAwsInfo": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.createAwsInfo,
  "getVaultDataByClient": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getVaultDataByClient,
  "createAzureInfo": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.createAzureInfo,
  "updateAwsInfo": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.updateAwsInfo,
  "updateAzureInfo": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.updateAzureInfo,
  "fetchVaultInfo": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.fetchVaultInfo
}

let userApiUrls = {
  "getUserDashboard": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.getUserDashboard,
  "getUserDashboardNew": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.getUserDashboardNew,
  "getUserDetails": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.getUserDetails,
  "createUser": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.createUser,
  "getAllUsers": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.getAllUsers,
  "userLogin": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.userLogin,
  "updateUser": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.updateUser,
  "sendOtp": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.sendOtp,
  "verifyOtp": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.verifyOtp,
  "resetPassword": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.resetPassword,
  "resetMfaToken": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.resetMfaToken,
  "changePassword": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.changePassword,
  "samlDetails": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.samlDetails,
  "userInfo": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.userInfo,
  "downloalUsersReport": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.downloalUsersReport,
  "adfsLogin": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.adfsLogin,
  "validateRecaptcha": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.validateRecaptcha,
  "verifyOtpResetPassword": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.verifyOtpResetPassword
}

let masterApiUrls = {
  "getMasterData": (dynamicUrls.masterService || staticUrls.masterService) + apiList.getMasterData,
  "uploadFile": (dynamicUrls.masterService || staticUrls.masterService) + apiList.uploadFile,
  "downloadFile": (dynamicUrls.masterService || staticUrls.masterService) + apiList.downloadFile,
  "gethealthboardFlag": (dynamicUrls.masterService || staticUrls.masterService) + apiList.gethealthboardFlag,
  "gethealthboardFlagSSO": (dynamicUrls.masterService || staticUrls.masterService) + apiList.gethealthboardFlagSSO,
  "getProductConfiguration": (dynamicUrls.masterService || staticUrls.masterService) + apiList.getProductConfiguration
}

let ticketApiUrls = {
  "ticketDashboard": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketDashboard,
  "getTicketDetails": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getTicketDetails,
  "escalateTicket": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.escalateTicket,
  "getTopSixGroups": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getTopSixGroups,
  "ticketDashBaord": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketDashBaord,
  "createTicket": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.createTicket,
  "updateTicket": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.updateTicket,
  "assignStaff": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.assignStaff,
  "initiatePlannedActivity": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.initiatePlannedActivity,
  "transferDept": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.transferDept,
  "postReply": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.postReply,
  "escalationDashboard": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.escalationDashboard,
  "deEscalateTicket": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.deEscalateTicket,
  "closeEscalateTicket": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.closeEscalateTicket,
  "mergeTickets": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.mergeTickets,
  "unMergeTickets": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.unMergeTickets,
  "getMergeParentTickets": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getMergeParentTickets,
  "getMergeChildTickets": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getMergeChildTickets,
  "parentTicketsDashboard": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.parentTicketsDashboard,
  "bulkCloseTicket": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.bulkCloseTicket,
  "averageAging": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.averageAging,
  "slaBreachInfo": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.slaBreachInfo,
  "ticketList": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketList,
  "ticketDetails": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketDetails,
  "allClientsTickets": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.allClientsTickets,
  "myOpenTickets": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.myOpenTickets,
  "getTicketStats": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getTicketStats,
  "getServiceCodesAws": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getServiceCodesAws,
  "getCategoryCodesAws": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getCategoryCodesAws,
  "createAwsSupportTicket": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.createAwsSupportTicket,
  "getTicketStatsDays": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getTicketStatsDays,
  "createServiceNowTicket": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.createServiceNowTicket,
  "getMatchedArticles": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getMatchedArticles
}

let rcaApiUrls = {
  "getRcaList": (dynamicUrls.rca || staticUrls.rca) + apiList.getRcaList,
  "getRcaDetails": (dynamicUrls.rca || staticUrls.rca) + apiList.getRcaDetails,
  "updateRca": (dynamicUrls.rca || staticUrls.rca) + apiList.updateRca,
  "initiateRca": (dynamicUrls.rca || staticUrls.rca) + apiList.initiateRca,
  "submitRca": (dynamicUrls.rca || staticUrls.rca) + apiList.submitRca,
  "approveRca": (dynamicUrls.rca || staticUrls.rca) + apiList.approveRca,
  "rejectRca": (dynamicUrls.rca || staticUrls.rca) + apiList.rejectRca,
  "dowloadPdfFile": (dynamicUrls.rca || staticUrls.rca) + apiList.dowloadPdfFile,
  "searchRca": (dynamicUrls.rca || staticUrls.rca) + apiList.searchRca
}

let samlUrl = {
  "samlLogin": (dynamicUrls.samlURL || staticUrls.samlURL) + apiList.samlLogin
}

let adminApiUrls = {
  "getGroups": (dynamicUrls.admin || staticUrls.admin) + apiList.getGroups,
  "getGroups_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.getGroups_v2,
  "getGroupList": (dynamicUrls.admin || staticUrls.admin) + apiList.getGroupList,
  "getGroupList_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.getGroupList_v2,
  "getClientGroups": (dynamicUrls.admin || staticUrls.admin) + apiList.getClientGroups,
  "getClientGroups_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.getClientGroups_v2,
  "getClientGroupList": (dynamicUrls.admin || staticUrls.admin) + apiList.getClientGroupList,
  "getClientGroupList_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.getClientGroupList_v2,
  "getRoles": (dynamicUrls.admin || staticUrls.admin) + apiList.getRoles,
  "getFeatures": (dynamicUrls.admin || staticUrls.admin) + apiList.getFeatures,
  "getFeatures_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.getFeatures_v2,
  "getPermissions": (dynamicUrls.admin || staticUrls.admin) + apiList.getPermissions,
  "getPermissions_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.getPermissions_v2,
  "getClients": (dynamicUrls.admin || staticUrls.admin) + apiList.getClients,
  "getHelpTopics": (dynamicUrls.admin || staticUrls.admin) + apiList.getHelpTopics,
  "getHelpTopics_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.getHelpTopics_v2,
  "getUsers": (dynamicUrls.admin || staticUrls.admin) + apiList.getUsers,
  "getAudits": (dynamicUrls.admin || staticUrls.admin) + apiList.getAudits,
  "clients": (dynamicUrls.admin || staticUrls.admin) + apiList.clients,
  "users": (dynamicUrls.admin || staticUrls.admin) + apiList.users,
  "groupsMappedToClient": (dynamicUrls.admin || staticUrls.admin) + apiList.groupsMappedToClient,
  "groupsMappedToClient_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.groupsMappedToClient_v2,
  "getClientVisList": (dynamicUrls.admin || staticUrls.admin) + apiList.getClientVisList,
  "getClientVisList_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.getClientVisList_v2,
  "adminClientGroups": (dynamicUrls.admin || staticUrls.admin) + apiList.adminClientGroups,
  "adminClientGroups_v2": (dynamicUrls.admin || staticUrls.admin) + apiList.adminClientGroups_v2,
  "systemPermission": (dynamicUrls.admin || staticUrls.admin) + apiList.systemPermission,
  "generateReport": (dynamicUrls.admin || staticUrls.admin) + apiList.generateReport,
  "updateReport": (dynamicUrls.admin || staticUrls.admin) + apiList.updateReport,
  "getReport": (dynamicUrls.admin || staticUrls.admin) + apiList.getReport,
  "downloadReport": (dynamicUrls.admin || staticUrls.admin) + apiList.downloadReport,
  "getSessions": (dynamicUrls.admin || staticUrls.admin) + apiList.getSessions,
  "approveSessionStep1": (dynamicUrls.admin || staticUrls.admin) + apiList.approveSessionStep1,
  "approveSessionStep2": (dynamicUrls.admin || staticUrls.admin) + apiList.approveSessionStep2,
  "declineSessionStep1": (dynamicUrls.admin || staticUrls.admin) + apiList.declineSessionStep1,
  "declineSessionStep2": (dynamicUrls.admin || staticUrls.admin) + apiList.declineSessionStep2
}

let projectApiUrls = {
  "getProjects": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.getProjects,
  "createProject": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.createProject,
  "getProjectDetails": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.getProjectDetails,
  "updateProject": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.updateProject,
  "getClientProjects": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.getClientProjects,
  "editProjectData": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.editProjectData,
  "getTimeSheetData": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.getTimeSheetData,
  "createSandBoxProject": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.createSandBoxProject,
  "viewProjectById": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.viewProjectById,
  "editSandboxProject": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.editSandboxProject,
  "deleteProject": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.deleteProject,
  "viewSandBoxAccountList": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.viewSandBoxAccountList,
  "deleteSandboxAccount": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.deleteSandboxAccount,
  "addSandboxWithoutApproval": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.addSandboxWithoutApproval,
  "addSandboxWithApproval": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.addSandboxAccount,
  "editSandboxAccount": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.editSandboxAccount,
  "addApprover": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.addApprover,
  "removeApprover": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.removeApprover,
  "sendReminder": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.sendReminder,
  "addUser": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.addUser,
  "removeUser": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.removeUser,
  "addAwsInfo": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.addAwsInfo,
  "addAzureInfo": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.addAzureInfo,
  "getProjectList": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.getProjectList,
  "sandboxAccountsByProject": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.sandboxAccountsByProject,
  "autoApproverForHost": (dynamicUrls.projectManagement || staticUrls.projectManagement) + apiList.autoApproverForHost
}

let momApiUrls = {
  "fetchMomData": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.fetchMomData,
  "fetchStatus": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.fetchStatus,
  "fetchTopicStatus": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.fetchTopicStatus,
  "getMomDetails": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.getMomDetails,
  "getCliStat": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.getCliStat,
  "createMom": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.createMom,
  "updateMom": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.updateMom,
  "deleteMom": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.deleteMom,
  "onMomSubmit": (dynamicUrls.minutesOfMeeting || staticUrls.minutesOfMeeting) + apiList.onMomSubmit
}

let paApiUrls = {
  "searchActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.searchActivity,
  "createPlannedActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.createPlannedActivity,
  "editPlannedActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.editPlannedActivity,
  "copyActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.copyActivity,
  "approveActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.approveActivity,
  "obsoleteActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.obsoleteActivity,
  "submitActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.submitActivity,
  "updatePlannedDetails": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.updatePlannedDetails,
  "deletePATask": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.deletePATask,
  "deletePARollback": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.deletePARollback,
  "unsuccessFullActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.unsuccessFullActivity,
  "rollBackActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.rollBackActivity,
  "completeActivity": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.completeActivity,
  "updateTicket": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.updateTicket,
  "unified_job_templates": 'https://orchestrationsandbox.concierto.in:8043' + apiList.unified_job_templates,
  "updatePATask": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.updatePATask,
  "updatePARollBack": (dynamicUrls.plannedActivity || staticUrls.plannedActivity) + apiList.updatePARollBack
}

let hostInventoryApiUrls = {
  "cspDetailsData": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.cspDetailsData,
  "taskList": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.taskList,
  "getHosts": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.getHosts,
  "getHostDetails": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.getAwsHostDetails,
  "approveHostDetails": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.approveHostDetails,
  "rejectHostDetails": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.rejectHostDetails,
  "approveHostDetailsAz": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.approveHostDetailsAz,
  "rejectHostDetailsAz": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.rejectHostDetailsAz,
  "startEC2": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.startEC2,
  "stopEC2": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.stopEC2,
  "createHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.createHost,
  "fetchEnv": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.fetchEnv,
  "fetchType": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.fetchType,
  "fetchOs": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.fetchOs,
  "getAzureHosts": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.getAzureHosts,
  "getAzureHostDetails": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.getAzureHostDetails,
  "createAzureHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.createAzureHost,
  "updateHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.updateHost,
  "updateAzureHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.updateAzureHost,
  "startVm": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.startVm,
  "stopVm": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.stopVm,
  "fetchRegionAWS": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.fetchRegionAWS,
  "fetchRegionAzure": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.fetchRegionAzure,
  "volumnList": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.volumnList,
  "deleteHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.deleteHost,
  "deleteAzureHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.deleteAzureHost,
  "downloadAwsReport": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.downloadAwsReport,
  "downloadAzureReport": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.downloadAzureReport,
  "listAwsHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.listAwsHost,
  "listAzureHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.listAzureHost,
  "displayAwsHostsById": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.displayAwsHostsById,
  "displayAzureHostsById": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.displayAzureHostsById,
  "updateAwsHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.updateAwsHost,
  "EditAzureHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.EditAzureHost,
  "getUserListForHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.getUserListForHost,
  "clientAutoDiscover": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.clientAutoDiscover,
  "clientMappingExist": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.clientMappingExist,
  "sandboxAutoDiscover": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.sandboxAutoDiscover,
  "sandboxMappingExist": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.sandboxMappingExist,
  "azureDiscoverList": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.azureDiscoverList,
  "azureDiscoveredHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.azureDiscoveredHost,
  "azureUnVerifiedList": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.azureUnVerifiedList,
  "azureUnVerifiedHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.azureUnVerifiedHost,
  "azureRejectedList": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.azureRejectedList,
  "azureRejectedHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.azureRejectedHost,
  "sendAzureHostForApproval": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.sendAzureHostForApproval,
  "awsDiscoverList": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.awsDiscoverList,
  "awsDiscoveredHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.awsDiscoveredHost,
  "awsUnVerifiedList": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.awsUnVerifiedList,
  "awsUnVerifiedHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.awsUnVerifiedHost,
  "awsRejectedList": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.awsRejectedList,
  "awsRejectedHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.awsRejectedHost,
  "clientLevelAutoDiscoveryForAws": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.clientLevelAutoDiscoveryForAws,
  "clientLevelAutoDiscoveryForAzure": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.clientLevelAutoDiscoveryForAzure,
  "autoDiscoveryForAwsAccount": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.autoDiscoveryForAwsAccount,
  "autoDiscoveryForAzureAccount": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.autoDiscoveryForAzureAccount,
  "removeAwsHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.removeAwsHost,
  "sendAwsHostForApproval": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.sendAwsHostForApproval,
  "getManualAutoDiscoveryStatus": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.getManualAutoDiscoveryStatus,
  "updateAwsDiscoveredHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.updateAwsDiscoveredHost,
  "updateAwsRejectedHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.updateAwsRejectedHost,
  "updateAzureDiscoverHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.updateAzureDiscoverHost,
  "sendAzurePreviousState": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.sendAzurePreviousState,
  "updateAzureRejectHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.updateAzureRejectHost,
  "removeAzureHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.removeAzureHost,
  "sendAwsPreviousState": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.sendAwsPreviousState,
  "bulkApproveAws": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.bulkApproveAws,
  "bulkRejectAws": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.bulkRejectAws,
  "bulkApproveAzure": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.bulkApproveAzure,
  "bulkRejectAzure": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.bulkRejectAzure,
  "awsCurrentState": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.awsCurrentState,
  "azureCurrentState": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.azureCurrentState,
  "manualStartAwsHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.manualStartAwsHost,
  "manualStopAwsHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.manualStopAwsHost,
  "manualStartAzureHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.manualStartAzureHost,
  "manualStopAzureHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.manualStopAzureHost,
  "awsSearchHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.awsSearchHost,
  "azureSearchHost": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.azureSearchHost,
  "syncAWSHostServiceNow": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.syncAWSHostServiceNow,
  "syncAzureHostServiceNow": (dynamicUrls.hostInventory || staticUrls.hostInventory) + apiList.syncAzureHostServiceNow
}

let scheduleTaskApiUrls = {
  "scheduleTaskSearch": (dynamicUrls.scheduleTask || staticUrls.scheduleTask) + apiList.scheduleTaskSearch,
  "updateST": (dynamicUrls.scheduleTask || staticUrls.scheduleTask) + apiList.updateST,
  "createST": (dynamicUrls.scheduleTask || staticUrls.scheduleTask) + apiList.createST,
  "downloadSampleURL": (dynamicUrls.scheduleTask || staticUrls.scheduleTask) + apiList.downloadSampleURL,
  "bulkUpload": (dynamicUrls.scheduleTask || staticUrls.scheduleTask) + apiList.bulkUpload
}


let monitoringApiUrls = {
  "fetchMonitoring": (dynamicUrls.monitoring || staticUrls.monitoring) + apiList.fetchMonitoring,
  "getMonitoringDetails": (dynamicUrls.monitoring || staticUrls.monitoring) + apiList.getMonitoringDetails
}

let requestFormApiUrls = {
  "getModuleName": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.getModuleName,
  "getRequestType": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.getRequestType,
  "getMemoryRequestType": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.getMemoryRequestType,
  "getTypeCheck": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.getTypeCheck,
  "viewProjectType": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.viewProjectType,
  "saveUserRequest": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.saveUserRequest,
  "saveClientRequest": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.saveClientRequest,
  "saveHostRequest": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.saveHostRequest,
  "addProbe": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.addProbe,
  "saveProjectRequest": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.saveProjectRequest,
  "savePsgRequest": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.savePsgRequest,
  "requestService": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.requestService,
  "infraServiceRequest": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.infraServiceRequest,
  "getInfraServiceDetails": (dynamicUrls.requestForm || staticUrls.requestForm) + apiList.getInfraServiceDetails
}
let reportApiUrls = {
  "getPolicyReport": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.getLogReport,
  "ticketSummaryReport": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketSummaryReport,
  "serviceSummaryReport": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.serviceSummaryReport,
  "exportExcelReport": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.exportExcelReport,
  "summaryExcelReport": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.summaryExcelReport,
  "userRequestReport": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.userRequestReport,
  "userTicketsCount": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.userTicketsCount,
  "userExcelReport": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.userExcelReport,
  "clientRequestReport": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.clientRequestReport,
  "clientExcelReport": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.clientExcelReport,
  "userTicketsCountExcel": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.userTicketsCountExcel,
  "listOfUsersForClientIds": (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.listOfUsersForClientIds,
  "userReportForExcel": (dynamicUrls.userDirectory || staticUrls.userDirectory) + apiList.userReportForExcel
}


let autoDocUrls = {
  "findAutoDocHostList": (dynamicUrls.autoDoc || staticUrls.autoDoc) + apiList.findAutoDocHostList,
  "downloadCurrentDelta": (dynamicUrls.autoDoc || staticUrls.autoDoc) + apiList.downloadCurrentDelta,
  "findDeltaHistory": (dynamicUrls.autoDoc || staticUrls.autoDoc) + apiList.findDeltaHistory,
  "downloadHistoryDelta": (dynamicUrls.autoDoc || staticUrls.autoDoc) + apiList.downloadHistoryDelta,
  "runScriptManual": ((dynamicUrls.autoDoc || staticUrls.autoDoc) + apiList.runScriptManual)
}
let changeRegisterUrls = {
  "findChange": (dynamicUrls.changeRegister || staticUrls.changeRegister) + apiList.findChange,
  "findChangeDetails": (dynamicUrls.changeRegister || staticUrls.changeRegister) + apiList.findChangeDetails,
  "saveChange": (dynamicUrls.changeRegister || staticUrls.changeRegister) + apiList.saveChange,
  "updateChange": (dynamicUrls.changeRegister || staticUrls.changeRegister) + apiList.updateChange,
  "deleteChange": (dynamicUrls.changeRegister || staticUrls.changeRegister) + apiList.deleteChange,
  "submitStatus": (dynamicUrls.changeRegister || staticUrls.changeRegister) + apiList.submitStatus
}

let healthBoardUrls = {
  //"getHealthBoard": (dynamicUrls.healthBoard || staticUrls.healthBoard) + apiList.getHealthBoard
  "getHealthBoard": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getHealthBoard
}

let clientHealthBaordUrls = {
  "getclientHealthBaord": (dynamicUrls.clientHealthBaord || staticUrls.clientHealthBaord) + apiList.getclientHealthBaord
}

let adminSettingsApiUrls = {
  "getTicketSettings": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getTicketSettings,
  "getLogs": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getLogs,
  "getEmailTemplates": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getEmailTemplates,
  "getSystemLogLevel": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getSystemLogLevel,
  "getMaxLogins": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getMaxLogins,
  "getBanList": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getBanList,
  "getTemplateList": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getTemplateList,
  "getEmailList": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getEmailList,
  "getTimeZones": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.getTimeZones,
  "updateTicketSettings": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.updateTicketSettings,
  "viewEmail": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.viewEmail,
  "deleteEmail": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.deleteEmail,
  "updateEmail": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.updateEmail,
  "createEmail": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.createEmail,
  "deleteTempl": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.deleteTempl,
  "deleteBan": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.deleteBan,
  "protocol": (dynamicUrls.adminSettings || staticUrls.adminSettings) + apiList.protocol
}

let serviceCatalogUrls = {
  "getTemplates": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.getTemplates,
  "getCatalogs": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.getCatalogs,
  "createServTemplate": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.createServTemplate,
  "createAwsCatalog": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.createAwsCatalog,
  "launchAwsCatalog": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.launchAwsCatalog,
  "createAzureCatalog": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.createAzureCatalog,
  "launchAzureCatalog": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.launchAzureCatalog,
  "updateAwsStack": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.updateAwsStack,
  "updateAzureStack": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.updateAzureStack,
  "getAwsRegions": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.getAwsRegions,
  "getAzureResourceGroup": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.getAzureResourceGroup,
  "createAnsibleCatalog": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.createAnsibleCatalog,
  "clientTemplates": (dynamicUrls.serviceCatalog || staticUrls.serviceCatalog) + apiList.clientTemplates
}

let orchestrationUrls = {
  "getTemplates": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.getOrchTemplates,
  "getTemplatesById": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.getTemplatesById,
  "getOrchServiceList": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.getOrchServiceList,
  "getOrchById": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.getOrchById,
  "createOrchTemplate": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.createOrchTemplate,
  "createOrchService": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.createOrchService,
  "modifyOrchService": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.modifyOrchService,
  "deleteOrchTemplate": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.deleteOrchTemplate,
  "deleteOrchLunched": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.deleteOrchLunched,
  "viewOrchProvider": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.viewOrchProvider,
  "createPowerShellTemplate": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.createPowerShellTemplate,
  "runPowerShellScript": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.runPowerShellScript,
  "matchOrchTemplates": (dynamicUrls.orchestration || staticUrls.orchestration) + apiList.matchOrchTemplates
}

let productConfigUrls = {
  "getClientSubscriptionTools": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.getClientSubscriptionTools,
  "getClientSubscriptionServices": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.getClientSubscriptionServices,
  "muteTab": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.muteTab,
  "getHostDetails": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.getHostDetails,
  "getApplicationDetails": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.getApplicationDetails,
  "getEventConfiguration": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.getEventConfiguration,
  "eventEnrichment": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.eventEnrichment,
  "othersTab": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.othersTab,
  "loginDetailsByClientId": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.loginDetailsByClientId,
  "listClodWatchLogGroupsNames": (dynamicUrls.productConfig || staticUrls.eventMonitoring) + apiList.listClodWatchLogGroupsNames,
  "listCloudWatchAlarmNames": (dynamicUrls.productConfig || staticUrls.eventMonitoring) + apiList.listCloudWatchAlarmNames,
  "listLogGroupType": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.listLogGroupType,
  "eventConfigByOnlyToolId": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.eventConfigByOnlyToolId,
  "getMappingByClient": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.getMappingByClient,
  "postClientSubscriptionTools": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.postClientSubscriptionTools,
  "editSubscriptionDetails": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.editSubscriptionDetails,
  "addServiceNowConfiguration": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.addServiceNowConfiguration,
  "updateServiceNowConfiguration": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.updateServiceNowConfiguration,
  "getServiceNowConfiguration": (dynamicUrls.productConfig || staticUrls.productConfig) + apiList.getServiceNowConfiguration
}

let cemDashboardEventsURLs = {
  activeEvents: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.activeEvents,
  inActiveEvents: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.inActiveEvents,
  socketConnection: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL),
  getActiveEventsByTime: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.getActiveEventsByTime,
  getResolvedEventsByTime: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.getResolvedEventsByTime,
  getEventsByApplication: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.getEventsByApplication,
  getEventsByType: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.getEventsByType,
  cemEventBarGraphData: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.cemEventBarGraphData,
  allEventList: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.allEventList,
  exportExcelForCEM: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.exportExcelForCEM,
  graphanaWidgetURL: (dynamicUrls.clientDirectory || staticUrls.clientDirectory) + apiList.graphanaWidgetURL,
  eventByRecurrence: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.eventByRecurrence,
  eventByTheTime: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.eventByTheTime,
  sendMailUrl: (dynamicUrls.masterService || staticUrls.masterService) + apiList.sendMailUrl,
  ticketByEvents: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.ticketByEvents,
  acknowledgeEvents: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.acknowledgeEvents,
  getTicketData: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.getTicketData,
  updateEvent: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.updateEvent,
  getEventByEventId: (dynamicUrls.cemSocketURL || staticUrls.cemSocketURL) + apiList.getEventByEventId
}

let knowledgeBaseUrls = {
  "getArticles": (dynamicUrls.knowledgeBase || staticUrls.knowledgeBase) + apiList.getArticles,
  "getArticlesById": (dynamicUrls.knowledgeBase || staticUrls.knowledgeBase) + apiList.getArticlesById,
  "getTags": (dynamicUrls.knowledgeBase || staticUrls.knowledgeBase) + apiList.getTags,
  "createArticle": (dynamicUrls.knowledgeBase || staticUrls.knowledgeBase) + apiList.createArticle,
  "editDeletePublishArticle": (dynamicUrls.knowledgeBase || staticUrls.knowledgeBase) + apiList.editDeletePublishArticle
}
let documentMgmtUrls = {
  "getDocumentList": (dynamicUrls.documentMgmt || staticUrls.documentMgmt) + apiList.getDocumentList,
  "getUserListForDoc": (dynamicUrls.documentMgmt || staticUrls.documentMgmt) + apiList.getUserListForDoc,
  "createDoc": (dynamicUrls.documentMgmt || staticUrls.documentMgmt) + apiList.createDoc,
  "updateDocById": (dynamicUrls.documentMgmt || staticUrls.documentMgmt) + apiList.updateDocById,
  "deleteDocById": (dynamicUrls.documentMgmt || staticUrls.documentMgmt) + apiList.deleteDocById,
  "getDocById": (dynamicUrls.documentMgmt || staticUrls.documentMgmt) + apiList.getDocById
}

let graphsUrls = {
  "eventByTheToolsTime": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.eventByTheToolsTime,
  "availableOrchTemplate": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.availableOrchTemplate,
  "availableTicketArticles": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.availableTicketArticles,
  "searchGraphActivity": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.searchGraphActivity,
  "ticketDepartmentCount": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketDepartmentCount,
  "rcaCountWithStatus": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.rcaCountWithStatus,
  "ticketStatusCount": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketStatusCount,
  "ticketAvgResponceResolution": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketAvgResponceResolution
}

let newDashBoard = {
  "ticketSlaStatistics": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketSlaStatistics,
  "acknowledgeEventsTrends": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.acknowledgeEventsTrends,
  "eventStatistics": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.eventStatistics,
  "ticketStatics": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketStatics,
  "escalationTicketsList": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.escalationTicketsList,
  "ticketsGroupByDatePriority": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketsGroupByDatePriority,
  "ticketsGroupByDateResponseResolution": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.ticketsGroupByDateResponseResolution,
  "eventsBySource": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.eventsBySource,
  "eventsToolsTrendsData": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.eventsToolsTrendsData
}

let teamsConfiguration = {
  "getTeamsList": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getTeamsList,
  "getChannelsList": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getChannelsList,
  "scheduleMeetingBehalfOfUser": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.scheduleMeetingBehalfOfUser,
  "sendMessageInChannelBehalfOfUser": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.sendMessageInChannelBehalfOfUser,
  "getTimeZonesBehalfOfUser": (dynamicUrls.ticketing || staticUrls.ticketing) + apiList.getTimeZonesBehalfOfUser
}

let orchestartionEngineURl = (process.env.REACT_APP_ORCHESTRATION_ENGINE || 'https://orchestrationsandbox.concierto.in:8043/');


export {
  authServerApiUrls,
  masterApiUrls,
  adminApiUrls,
  clientApiUrls,
  userApiUrls,
  rcaApiUrls,
  projectApiUrls,
  momApiUrls,
  paApiUrls,
  hostInventoryApiUrls,
  scheduleTaskApiUrls,
  monitoringApiUrls,
  requestFormApiUrls,
  ticketApiUrls,
  changeRegisterUrls,
  healthBoardUrls,
  clientHealthBaordUrls,
  adminSettingsApiUrls,
  samlUrl,
  reportApiUrls,
  autoDocUrls,
  serviceCatalogUrls,
  orchestrationUrls,
  productConfigUrls,
  cemDashboardEventsURLs,
  knowledgeBaseUrls,
  documentMgmtUrls,
  graphsUrls,
  newDashBoard,
  teamsConfiguration,
  orchestartionEngineURl
}